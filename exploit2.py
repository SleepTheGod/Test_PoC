import websocket
import json
import time
import logging
import os
from retrying import retry

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Retrieve BTC address from environment variables
YOUR_BTC_ADDRESS = os.getenv("BTC_ADDRESS", "3EfHTAgiL2LchH9uvp3wXsRfSqrciNTArr")

def on_open(ws):
    """
    Called when the WebSocket connection is opened.
    """
    logging.info("WebSocket opened. Subscribing to BTC address.")
    subscription_message = json.dumps({"op": "addr_sub", "addr": YOUR_BTC_ADDRESS})
    ws.send(subscription_message)

def on_message(ws, message):
    """
    Called when a message is received from the WebSocket.
    """
    logging.info("Message received: %s", message)

def on_error(ws, error):
    """
    Called when an error occurs with the WebSocket.
    """
    logging.error("WebSocket error: %s", error)

def on_close(ws, close_status_code, close_msg):
    """
    Called when the WebSocket is closed.
    """
    logging.warning("WebSocket closed with status code %s and message %s", close_status_code, close_msg)

@retry(wait_exponential_multiplier=1000, wait_exponential_max=10000)
def connect():
    """
    Connect to the WebSocket server with exponential backoff retry strategy.
    """
    websocket.enableTrace(True)
    ws = websocket.WebSocketApp("wss://ws.blockchain.info/inv",
                                on_open=on_open,
                                on_message=on_message,
                                on_error=on_error,
                                on_close=on_close)
    ws.run_forever()

if __name__ == "__main__":
    connect()
